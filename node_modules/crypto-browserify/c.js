(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (Buffer){
var createHash = require('sha.js')

var md5 = toConstructor(require('./md5'))
var rmd160 = toConstructor(require('ripemd160'))

function toConstructor (fn) {
  return function () {
    var buffers = []
    var m= {
      update: function (data, enc) {
        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
        buffers.push(data)
        return this
      },
      digest: function (enc) {
        var buf = Buffer.concat(buffers)
        var r = fn(buf)
        buffers = null
        return enc ? r.toString(enc) : r
      }
    }
    return m
  }
}

module.exports = function (alg) {
  if('md5' === alg) return new md5()
  if('rmd160' === alg) return new rmd160()
  return createHash(alg)
}

}).call(this,require("buffer").Buffer)
},{"./md5":5,"buffer":37,"ripemd160":12,"sha.js":14}],2:[function(require,module,exports){
(function (Buffer){
var createHash = require('./create-hash')

var zeroBuffer = new Buffer(128)
zeroBuffer.fill(0)

module.exports = Hmac

function Hmac (alg, key) {
  if(!(this instanceof Hmac)) return new Hmac(alg, key)
  this._opad = opad
  this._alg = alg

  var blocksize = (alg === 'sha512') ? 128 : 64

  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

  if(key.length > blocksize) {
    key = createHash(alg).update(key).digest()
  } else if(key.length < blocksize) {
    key = Buffer.concat([key, zeroBuffer], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for(var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)
  return this
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()
  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}


}).call(this,require("buffer").Buffer)
},{"./create-hash":1,"buffer":37}],3:[function(require,module,exports){
(function (Buffer){
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}

module.exports = { hash: hash };

}).call(this,require("buffer").Buffer)
},{"buffer":37}],4:[function(require,module,exports){
(function (Buffer){
var rng = require('./rng')

function error () {
  var m = [].slice.call(arguments).join(' ')
  throw new Error([
    m,
    'we accept pull requests',
    'http://github.com/dominictarr/crypto-browserify'
    ].join('\n'))
}

exports.createHash = require('./create-hash')

exports.createHmac = require('./create-hmac')

exports.randomBytes = function(size, callback) {
  if (callback && callback.call) {
    try {
      callback.call(this, undefined, new Buffer(rng(size)))
    } catch (err) { callback(err) }
  } else {
    return new Buffer(rng(size))
  }
}

function each(a, f) {
  for(var i in a)
    f(a[i], i)
}

exports.getHashes = function () {
  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
}

var p = require('./pbkdf2')(exports)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync


// the least I can do is make error messages for the rest of the node.js/crypto api.
each(['createCredentials'
, 'createCipher'
, 'createCipheriv'
, 'createDecipher'
, 'createDecipheriv'
, 'createSign'
, 'createVerify'
, 'createDiffieHellman'
], function (name) {
  exports[name] = function () {
    error('sorry,', name, 'is not implemented yet')
  }
})

}).call(this,require("buffer").Buffer)
},{"./create-hash":1,"./create-hmac":2,"./pbkdf2":32,"./rng":33,"buffer":37}],5:[function(require,module,exports){
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};

},{"./helpers":3}],6:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  if (encoding === 'base64' && type === 'string') {
    subject = base64clean(subject)
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str.toString()
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.compare = function (a, b) {
  assert(Buffer.isBuffer(a) && Buffer.isBuffer(b), 'Arguments must be Buffers')
  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) {
    return -1
  }
  if (y < x) {
    return 1
  }
  return 0
}

// BUFFER INSTANCE METHODS
// =======================

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end === undefined) ? self.length : Number(end)

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = asciiSlice(self, start, end)
      break
    case 'binary':
      ret = binarySlice(self, start, end)
      break
    case 'base64':
      ret = base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

Buffer.prototype.equals = function (b) {
  assert(Buffer.isBuffer(b), 'Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.compare = function (b) {
  assert(Buffer.isBuffer(b), 'Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function binarySlice (buf, start, end) {
  return asciiSlice(buf, start, end)
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return readUInt16(this, offset, false, noAssert)
}

function readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return readInt16(this, offset, false, noAssert)
}

function readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return readInt32(this, offset, false, noAssert)
}

function readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return readFloat(this, offset, false, noAssert)
}

function readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
  return offset + 1
}

function writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
  return offset + 2
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  return writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  return writeUInt16(this, value, offset, false, noAssert)
}

function writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
  return offset + 4
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  return writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  return writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
  return offset + 1
}

function writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
  return offset + 2
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  return writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  return writeInt16(this, value, offset, false, noAssert)
}

function writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
  return offset + 4
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  return writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  return writeInt32(this, value, offset, false, noAssert)
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F) {
      byteArray.push(b)
    } else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++) {
        byteArray.push(parseInt(h[j], 16))
      }
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

},{"base64-js":7,"ieee754":8}],7:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],8:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],9:[function(require,module,exports){
module.exports=[
  {
    "input": "",
    "DSA": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "DSA-SHA": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "DSA-SHA1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "DSA-SHA1-old": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "RSA-MD4": "31d6cfe0d16ae931b73c59d7e0c089c0",
    "RSA-MD5": "d41d8cd98f00b204e9800998ecf8427e",
    "RSA-MDC2": "52525252525252522525252525252525",
    "RSA-RIPEMD160": "9c1185a5c5e9fc54612808977ee8f548b2258d31",
    "RSA-SHA": "f96cea198ad1dd5617ac084a3d92c6107708c0ef",
    "RSA-SHA1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "RSA-SHA1-2": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "RSA-SHA224": "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f",
    "RSA-SHA256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
    "RSA-SHA384": "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b",
    "RSA-SHA512": "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
    "dsaEncryption": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "dsaWithSHA": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "dsaWithSHA1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "dss1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "ecdsa-with-SHA1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "md4": "31d6cfe0d16ae931b73c59d7e0c089c0",
    "md4WithRSAEncryption": "31d6cfe0d16ae931b73c59d7e0c089c0",
    "md5": "d41d8cd98f00b204e9800998ecf8427e",
    "md5WithRSAEncryption": "d41d8cd98f00b204e9800998ecf8427e",
    "mdc2": "52525252525252522525252525252525",
    "mdc2WithRSA": "52525252525252522525252525252525",
    "ripemd": "9c1185a5c5e9fc54612808977ee8f548b2258d31",
    "ripemd160": "9c1185a5c5e9fc54612808977ee8f548b2258d31",
    "ripemd160WithRSA": "9c1185a5c5e9fc54612808977ee8f548b2258d31",
    "rmd160": "9c1185a5c5e9fc54612808977ee8f548b2258d31",
    "sha": "f96cea198ad1dd5617ac084a3d92c6107708c0ef",
    "sha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "sha1WithRSAEncryption": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "sha224": "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f",
    "sha224WithRSAEncryption": "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f",
    "sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
    "sha256WithRSAEncryption": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
    "sha384": "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b",
    "sha384WithRSAEncryption": "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b",
    "sha512": "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
    "sha512WithRSAEncryption": "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
    "shaWithRSAEncryption": "f96cea198ad1dd5617ac084a3d92c6107708c0ef",
    "ssl2-md5": "d41d8cd98f00b204e9800998ecf8427e",
    "ssl3-md5": "d41d8cd98f00b204e9800998ecf8427e",
    "ssl3-sha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "whirlpool": "19fa61d75522a4669b44e39c1d2e1726c530232130d407f89afee0964997f7a73e83be698b288febcf88e3e03c4f0757ea8964e59b63d93708b138cc42a66eb3"
  },
  {
    "input": "JA==",
    "DSA": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "DSA-SHA": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "DSA-SHA1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "DSA-SHA1-old": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "RSA-MD4": "c7215e7d305abfa7f00f9909db8d6770",
    "RSA-MD5": "c3e97dd6e97fb5125688c97f36720cbe",
    "RSA-MDC2": "c2e2433873daab0be4ab43f5991d3f4f",
    "RSA-RIPEMD160": "857b2f94d0b47a0a61bbee5993fd6ff34c0fe4a1",
    "RSA-SHA": "7c12402b104c3b87e91f90c8451c871b019160ae",
    "RSA-SHA1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "RSA-SHA1-2": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "RSA-SHA224": "23fa1e672a6c2acdc4d7bfae713e0c9337ba057b5d5ace2685b59321",
    "RSA-SHA256": "09fc96082d34c2dfc1295d92073b5ea1dc8ef8da95f14dfded011ffb96d3e54b",
    "RSA-SHA384": "b1583f4b2e1bf53fc31e9dfb8e8d945a62955da709f280a9066aa8f31ef688d65e0e9816a5f1f11363b3898820bd1576",
    "RSA-SHA512": "840cfc6285878464c36c9aa819d8373729eda14c3e701fd37afec1d5baa2893944c696fc4017a520abfbb1347b62e6b858211d3ea7c7dd26319601fde119c3b4",
    "dsaEncryption": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "dsaWithSHA": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "dsaWithSHA1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "dss1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "ecdsa-with-SHA1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "md4": "c7215e7d305abfa7f00f9909db8d6770",
    "md4WithRSAEncryption": "c7215e7d305abfa7f00f9909db8d6770",
    "md5": "c3e97dd6e97fb5125688c97f36720cbe",
    "md5WithRSAEncryption": "c3e97dd6e97fb5125688c97f36720cbe",
    "mdc2": "c2e2433873daab0be4ab43f5991d3f4f",
    "mdc2WithRSA": "c2e2433873daab0be4ab43f5991d3f4f",
    "ripemd": "857b2f94d0b47a0a61bbee5993fd6ff34c0fe4a1",
    "ripemd160": "857b2f94d0b47a0a61bbee5993fd6ff34c0fe4a1",
    "ripemd160WithRSA": "857b2f94d0b47a0a61bbee5993fd6ff34c0fe4a1",
    "rmd160": "857b2f94d0b47a0a61bbee5993fd6ff34c0fe4a1",
    "sha": "7c12402b104c3b87e91f90c8451c871b019160ae",
    "sha1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "sha1WithRSAEncryption": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "sha224": "23fa1e672a6c2acdc4d7bfae713e0c9337ba057b5d5ace2685b59321",
    "sha224WithRSAEncryption": "23fa1e672a6c2acdc4d7bfae713e0c9337ba057b5d5ace2685b59321",
    "sha256": "09fc96082d34c2dfc1295d92073b5ea1dc8ef8da95f14dfded011ffb96d3e54b",
    "sha256WithRSAEncryption": "09fc96082d34c2dfc1295d92073b5ea1dc8ef8da95f14dfded011ffb96d3e54b",
    "sha384": "b1583f4b2e1bf53fc31e9dfb8e8d945a62955da709f280a9066aa8f31ef688d65e0e9816a5f1f11363b3898820bd1576",
    "sha384WithRSAEncryption": "b1583f4b2e1bf53fc31e9dfb8e8d945a62955da709f280a9066aa8f31ef688d65e0e9816a5f1f11363b3898820bd1576",
    "sha512": "840cfc6285878464c36c9aa819d8373729eda14c3e701fd37afec1d5baa2893944c696fc4017a520abfbb1347b62e6b858211d3ea7c7dd26319601fde119c3b4",
    "sha512WithRSAEncryption": "840cfc6285878464c36c9aa819d8373729eda14c3e701fd37afec1d5baa2893944c696fc4017a520abfbb1347b62e6b858211d3ea7c7dd26319601fde119c3b4",
    "shaWithRSAEncryption": "7c12402b104c3b87e91f90c8451c871b019160ae",
    "ssl2-md5": "c3e97dd6e97fb5125688c97f36720cbe",
    "ssl3-md5": "c3e97dd6e97fb5125688c97f36720cbe",
    "ssl3-sha1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "whirlpool": "42858987414fe0c406d287f84292e90ad2c4458f9d5493be95780c4bc405dc506b9db976ddbde235d969bfdff2a6abf7c55d5bcf8a4138aab828409096d079fa"
  },
  {
    "input": "cPA=",
    "DSA": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "DSA-SHA": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "DSA-SHA1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "DSA-SHA1-old": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "RSA-MD4": "8cec4677514fdd9f83865fb501581401",
    "RSA-MD5": "038701ca277a9d4de87bff428dd30a12",
    "RSA-MDC2": "d51917bf740514d2513f53e005e51d52",
    "RSA-RIPEMD160": "c45bf1cfc102c6607c115ba88ad7ab701a8e1d90",
    "RSA-SHA": "f21ff66e7c31a44988ad6b38fd930d4e45087b9c",
    "RSA-SHA1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "RSA-SHA1-2": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "RSA-SHA224": "e0a4d9e862c2ed21309902bff1a9fb79f5869052714d6539c5aea631",
    "RSA-SHA256": "33a633841666a5c291a82bfae65deac5c537d05f9fe926cbb5b7281bf90ad150",
    "RSA-SHA384": "ba3ee00e0d80afcecaf0adeb2161838a4b1ea6a4c9f0aced178ebc7dbb1ab4c51f7032b7086a804c69f864d257b7f480",
    "RSA-SHA512": "94d5407efa06aa877c84b998abde44caf6948cf6b6475e519baadb41790e3fbbbecf518288d57f5a84a54892482aa76f5d17adc5be176a476b712e9b5d30bb2c",
    "dsaEncryption": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "dsaWithSHA": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "dsaWithSHA1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "dss1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "ecdsa-with-SHA1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "md4": "8cec4677514fdd9f83865fb501581401",
    "md4WithRSAEncryption": "8cec4677514fdd9f83865fb501581401",
    "md5": "038701ca277a9d4de87bff428dd30a12",
    "md5WithRSAEncryption": "038701ca277a9d4de87bff428dd30a12",
    "mdc2": "d51917bf740514d2513f53e005e51d52",
    "mdc2WithRSA": "d51917bf740514d2513f53e005e51d52",
    "ripemd": "c45bf1cfc102c6607c115ba88ad7ab701a8e1d90",
    "ripemd160": "c45bf1cfc102c6607c115ba88ad7ab701a8e1d90",
    "ripemd160WithRSA": "c45bf1cfc102c6607c115ba88ad7ab701a8e1d90",
    "rmd160": "c45bf1cfc102c6607c115ba88ad7ab701a8e1d90",
    "sha": "f21ff66e7c31a44988ad6b38fd930d4e45087b9c",
    "sha1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "sha1WithRSAEncryption": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "sha224": "e0a4d9e862c2ed21309902bff1a9fb79f5869052714d6539c5aea631",
    "sha224WithRSAEncryption": "e0a4d9e862c2ed21309902bff1a9fb79f5869052714d6539c5aea631",
    "sha256": "33a633841666a5c291a82bfae65deac5c537d05f9fe926cbb5b7281bf90ad150",
    "sha256WithRSAEncryption": "33a633841666a5c291a82bfae65deac5c537d05f9fe926cbb5b7281bf90ad150",
    "sha384": "ba3ee00e0d80afcecaf0adeb2161838a4b1ea6a4c9f0aced178ebc7dbb1ab4c51f7032b7086a804c69f864d257b7f480",
    "sha384WithRSAEncryption": "ba3ee00e0d80afcecaf0adeb2161838a4b1ea6a4c9f0aced178ebc7dbb1ab4c51f7032b7086a804c69f864d257b7f480",
    "sha512": "94d5407efa06aa877c84b998abde44caf6948cf6b6475e519baadb41790e3fbbbecf518288d57f5a84a54892482aa76f5d17adc5be176a476b712e9b5d30bb2c",
    "sha512WithRSAEncryption": "94d5407efa06aa877c84b998abde44caf6948cf6b6475e519baadb41790e3fbbbecf518288d57f5a84a54892482aa76f5d17adc5be176a476b712e9b5d30bb2c",
    "shaWithRSAEncryption": "f21ff66e7c31a44988ad6b38fd930d4e45087b9c",
    "ssl2-md5": "038701ca277a9d4de87bff428dd30a12",
    "ssl3-md5": "038701ca277a9d4de87bff428dd30a12",
    "ssl3-sha1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "whirlpool": "5380824259b0aeccc5617ba3fbf9cdf931c7053e114bec944af7e3371076ac1570a0d774135ae43c958defd06f27aa9d8576106b00b2d9ecbba0a2c88c6d6e6d"
  },
  {
    "input": "Dh7w",
    "DSA": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "DSA-SHA": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "DSA-SHA1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "DSA-SHA1-old": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "RSA-MD4": "fe6f223ef7e24708a7a4419114aa8879",
    "RSA-MD5": "bc60c6192e361d99b59d47250668a852",
    "RSA-MDC2": "11a97b562c33212f0d47473dbc43313e",
    "RSA-RIPEMD160": "bb76cf98ffe1e37d0c10f15706f73c463dc71053",
    "RSA-SHA": "e03d5e997e65b6b7b8c96826fd28e36a59f2a26c",
    "RSA-SHA1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "RSA-SHA1-2": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "RSA-SHA224": "9896a021c402d700800fbc74f9bbf44740349cff83e7763e576cfc51",
    "RSA-SHA256": "8e2cc699f7e677265069f172d4cba15c146e954d7e4f2a8c176576035275b7a0",
    "RSA-SHA384": "4f779d096abf21d57803369791631552128e67e70cb0d40f56b4e7f0b4b484e794d81aba38a838c95b2d3548c2a0ef40",
    "RSA-SHA512": "41e7f289effb46f2ca50b65f9702acc92a4c238a55ce2451a8fa6ccd46e589323ae9ff6dcec415aa42f238749ce9c43f3a7e6d1eaebc27fc7715895afcb16d8f",
    "dsaEncryption": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "dsaWithSHA": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "dsaWithSHA1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "dss1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "ecdsa-with-SHA1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "md4": "fe6f223ef7e24708a7a4419114aa8879",
    "md4WithRSAEncryption": "fe6f223ef7e24708a7a4419114aa8879",
    "md5": "bc60c6192e361d99b59d47250668a852",
    "md5WithRSAEncryption": "bc60c6192e361d99b59d47250668a852",
    "mdc2": "11a97b562c33212f0d47473dbc43313e",
    "mdc2WithRSA": "11a97b562c33212f0d47473dbc43313e",
    "ripemd": "bb76cf98ffe1e37d0c10f15706f73c463dc71053",
    "ripemd160": "bb76cf98ffe1e37d0c10f15706f73c463dc71053",
    "ripemd160WithRSA": "bb76cf98ffe1e37d0c10f15706f73c463dc71053",
    "rmd160": "bb76cf98ffe1e37d0c10f15706f73c463dc71053",
    "sha": "e03d5e997e65b6b7b8c96826fd28e36a59f2a26c",
    "sha1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "sha1WithRSAEncryption": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "sha224": "9896a021c402d700800fbc74f9bbf44740349cff83e7763e576cfc51",
    "sha224WithRSAEncryption": "9896a021c402d700800fbc74f9bbf44740349cff83e7763e576cfc51",
    "sha256": "8e2cc699f7e677265069f172d4cba15c146e954d7e4f2a8c176576035275b7a0",
    "sha256WithRSAEncryption": "8e2cc699f7e677265069f172d4cba15c146e954d7e4f2a8c176576035275b7a0",
    "sha384": "4f779d096abf21d57803369791631552128e67e70cb0d40f56b4e7f0b4b484e794d81aba38a838c95b2d3548c2a0ef40",
    "sha384WithRSAEncryption": "4f779d096abf21d57803369791631552128e67e70cb0d40f56b4e7f0b4b484e794d81aba38a838c95b2d3548c2a0ef40",
    "sha512": "41e7f289effb46f2ca50b65f9702acc92a4c238a55ce2451a8fa6ccd46e589323ae9ff6dcec415aa42f238749ce9c43f3a7e6d1eaebc27fc7715895afcb16d8f",
    "sha512WithRSAEncryption": "41e7f289effb46f2ca50b65f9702acc92a4c238a55ce2451a8fa6ccd46e589323ae9ff6dcec415aa42f238749ce9c43f3a7e6d1eaebc27fc7715895afcb16d8f",
    "shaWithRSAEncryption": "e03d5e997e65b6b7b8c96826fd28e36a59f2a26c",
    "ssl2-md5": "bc60c6192e361d99b59d47250668a852",
    "ssl3-md5": "bc60c6192e361d99b59d47250668a852",
    "ssl3-sha1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "whirlpool": "620675595fcfcbe8486c3eb819075c4aa54b3a022289407a4d68f851278ecba71c83b58e8b9de7a28cff4a45da99e8fc9633f9e9f05bdc01bc0ed5007ec4bc11"
  },
  {
    "input": "CDh4jw==",
    "DSA": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "DSA-SHA": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "DSA-SHA1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "DSA-SHA1-old": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "RSA-MD4": "70b7b5c5509efe254425736c8eeddca7",
    "RSA-MD5": "542c3a0ab6b51bc6a88fa7bb567bca3e",
    "RSA-MDC2": "0a010c91851876665dab9f9ad6fcfa77",
    "RSA-RIPEMD160": "744a76f9ad4b9b264e834fae665dc5c9be024b1e",
    "RSA-SHA": "3eaee2d3221c01fcf5f5626b01642fc69806b5c9",
    "RSA-SHA1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "RSA-SHA1-2": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "RSA-SHA224": "65e4b1ec58c705d04782f44c6d6c5b67ad7469cc3dddd165f08fdc39",
    "RSA-SHA256": "8096d72b968a2dbb7ceee163c1981f7f1ec11ee10051b2dc2a8d7601d4e56971",
    "RSA-SHA384": "4b2ea7a3e1142ed72ba0e2503a024299d47580928eaa1de8fdc2b2df399e9ddda0654cbc0006ea776bc4a21c8a28b49a",
    "RSA-SHA512": "9115ace4a1fb9ad2e367f24cd73a68347db6103e4429f3ef989643563f1eeb74cb279561c461eb67cf47bdc764c107e4371415dab3f089f0f189edf9cc09a84a",
    "dsaEncryption": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "dsaWithSHA": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "dsaWithSHA1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "dss1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "ecdsa-with-SHA1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "md4": "70b7b5c5509efe254425736c8eeddca7",
    "md4WithRSAEncryption": "70b7b5c5509efe254425736c8eeddca7",
    "md5": "542c3a0ab6b51bc6a88fa7bb567bca3e",
    "md5WithRSAEncryption": "542c3a0ab6b51bc6a88fa7bb567bca3e",
    "mdc2": "0a010c91851876665dab9f9ad6fcfa77",
    "mdc2WithRSA": "0a010c91851876665dab9f9ad6fcfa77",
    "ripemd": "744a76f9ad4b9b264e834fae665dc5c9be024b1e",
    "ripemd160": "744a76f9ad4b9b264e834fae665dc5c9be024b1e",
    "ripemd160WithRSA": "744a76f9ad4b9b264e834fae665dc5c9be024b1e",
    "rmd160": "744a76f9ad4b9b264e834fae665dc5c9be024b1e",
    "sha": "3eaee2d3221c01fcf5f5626b01642fc69806b5c9",
    "sha1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "sha1WithRSAEncryption": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "sha224": "65e4b1ec58c705d04782f44c6d6c5b67ad7469cc3dddd165f08fdc39",
    "sha224WithRSAEncryption": "65e4b1ec58c705d04782f44c6d6c5b67ad7469cc3dddd165f08fdc39",
    "sha256": "8096d72b968a2dbb7ceee163c1981f7f1ec11ee10051b2dc2a8d7601d4e56971",
    "sha256WithRSAEncryption": "8096d72b968a2dbb7ceee163c1981f7f1ec11ee10051b2dc2a8d7601d4e56971",
    "sha384": "4b2ea7a3e1142ed72ba0e2503a024299d47580928eaa1de8fdc2b2df399e9ddda0654cbc0006ea776bc4a21c8a28b49a",
    "sha384WithRSAEncryption": "4b2ea7a3e1142ed72ba0e2503a024299d47580928eaa1de8fdc2b2df399e9ddda0654cbc0006ea776bc4a21c8a28b49a",
    "sha512": "9115ace4a1fb9ad2e367f24cd73a68347db6103e4429f3ef989643563f1eeb74cb279561c461eb67cf47bdc764c107e4371415dab3f089f0f189edf9cc09a84a",
    "sha512WithRSAEncryption": "9115ace4a1fb9ad2e367f24cd73a68347db6103e4429f3ef989643563f1eeb74cb279561c461eb67cf47bdc764c107e4371415dab3f089f0f189edf9cc09a84a",
    "shaWithRSAEncryption": "3eaee2d3221c01fcf5f5626b01642fc69806b5c9",
    "ssl2-md5": "542c3a0ab6b51bc6a88fa7bb567bca3e",
    "ssl3-md5": "542c3a0ab6b51bc6a88fa7bb567bca3e",
    "ssl3-sha1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "whirlpool": "b4e340da8cf3791c06be2cdf2b116d25af9afd79aa16d7561f0ebc86d2d958366b3aaa4d24bc9fb94fdb018c34d4942c86051c869c3c483fb65c5d8a55874635"
  },
  {
    "input": "ED4I/A8=",
    "DSA": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "DSA-SHA": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "DSA-SHA1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "DSA-SHA1-old": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "RSA-MD4": "6a393bac79c17ac4b4c807c7e4308246",
    "RSA-MD5": "e035f9e748a2a09a4fbdcf18c4f58bf1",
    "RSA-MDC2": "425c968bf0c99f4b0bb1d652a014427f",
    "RSA-RIPEMD160": "9ea1db9ff405c3ea4961afe11f91ac671a8700c9",
    "RSA-SHA": "b6ad4ccb91e7f2979f66b20adca98cab8df1b57b",
    "RSA-SHA1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "RSA-SHA1-2": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "RSA-SHA224": "561c8bf49dc2d996ef5e48c90f33bf020b8e5cf6cbab12910e212593",
    "RSA-SHA256": "2cc06402328f034d1909fa7b95f34cdb5585ce7f9096bc4082c97904921f6304",
    "RSA-SHA384": "4bec36fa178f30484c4f03764fd8978b204960104d766503be6253ef89ce83d804983c703562f6fb172f954495b80999",
    "RSA-SHA512": "f4b4cf07e964c53fcefb0f7d48596beab1722e1d9a70ab74ec73140f0f4b7cd9bce6d7ed8e873639f2c32f2e4828294c6af04267d68c3f27ae065a781d66d9fe",
    "dsaEncryption": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "dsaWithSHA": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "dsaWithSHA1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "dss1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "ecdsa-with-SHA1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "md4": "6a393bac79c17ac4b4c807c7e4308246",
    "md4WithRSAEncryption": "6a393bac79c17ac4b4c807c7e4308246",
    "md5": "e035f9e748a2a09a4fbdcf18c4f58bf1",
    "md5WithRSAEncryption": "e035f9e748a2a09a4fbdcf18c4f58bf1",
    "mdc2": "425c968bf0c99f4b0bb1d652a014427f",
    "mdc2WithRSA": "425c968bf0c99f4b0bb1d652a014427f",
    "ripemd": "9ea1db9ff405c3ea4961afe11f91ac671a8700c9",
    "ripemd160": "9ea1db9ff405c3ea4961afe11f91ac671a8700c9",
    "ripemd160WithRSA": "9ea1db9ff405c3ea4961afe11f91ac671a8700c9",
    "rmd160": "9ea1db9ff405c3ea4961afe11f91ac671a8700c9",
    "sha": "b6ad4ccb91e7f2979f66b20adca98cab8df1b57b",
    "sha1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "sha1WithRSAEncryption": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "sha224": "561c8bf49dc2d996ef5e48c90f33bf020b8e5cf6cbab12910e212593",
    "sha224WithRSAEncryption": "561c8bf49dc2d996ef5e48c90f33bf020b8e5cf6cbab12910e212593",
    "sha256": "2cc06402328f034d1909fa7b95f34cdb5585ce7f9096bc4082c97904921f6304",
    "sha256WithRSAEncryption": "2cc06402328f034d1909fa7b95f34cdb5585ce7f9096bc4082c97904921f6304",
    "sha384": "4bec36fa178f30484c4f03764fd8978b204960104d766503be6253ef89ce83d804983c703562f6fb172f954495b80999",
    "sha384WithRSAEncryption": "4bec36fa178f30484c4f03764fd8978b204960104d766503be6253ef89ce83d804983c703562f6fb172f954495b80999",
    "sha512": "f4b4cf07e964c53fcefb0f7d48596beab1722e1d9a70ab74ec73140f0f4b7cd9bce6d7ed8e873639f2c32f2e4828294c6af04267d68c3f27ae065a781d66d9fe",
    "sha512WithRSAEncryption": "f4b4cf07e964c53fcefb0f7d48596beab1722e1d9a70ab74ec73140f0f4b7cd9bce6d7ed8e873639f2c32f2e4828294c6af04267d68c3f27ae065a781d66d9fe",
    "shaWithRSAEncryption": "b6ad4ccb91e7f2979f66b20adca98cab8df1b57b",
    "ssl2-md5": "e035f9e748a2a09a4fbdcf18c4f58bf1",
    "ssl3-md5": "e035f9e748a2a09a4fbdcf18c4f58bf1",
    "ssl3-sha1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "whirlpool": "38b2050d729bda334f9416cc738a45e00f809b63e785ed5b6e2b4be42a42681027b64f99eb856d85233d63aa8c52f879ab021b62a060ceffe830b7ed8aa1052f"
  },
  {
    "input": "58ceB+8D",
    "DSA": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "DSA-SHA": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "DSA-SHA1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "DSA-SHA1-old": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "RSA-MD4": "14226bf662b757c985968b1a3cc86b80",
    "RSA-MD5": "3b4cc9226a236742d72578c5915b6c3c",
    "RSA-MDC2": "e201f3d4d35c67817d9ab7c0ab2b5d26",
    "RSA-RIPEMD160": "eee22b636281b5c125e9fe38f9ab754afa648fd1",
    "RSA-SHA": "300e8646d5d0ed06c5d7344798d710a115e93888",
    "RSA-SHA1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "RSA-SHA1-2": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "RSA-SHA224": "fc062b6f3c2b5f3fbdcda1bbd6601e8b5b48748dd210634416b254e3",
    "RSA-SHA256": "99a8d6823b803a8d41ed7c26322b4ac8fdc86ce4457ffaaf8600e99595f1577a",
    "RSA-SHA384": "ae3099ae9838e3e363f365040fa186de3b7d6f134f6018ae763b831afc0cfbde03e17c7b5d5bec3089a26f274fe2b297",
    "RSA-SHA512": "eb2276d498230c11404628a8dab7a851b1e9b1e529dc92241e8b99b2d11cea4668be552d40af999af815c9c3994da790de94386b955fa762e9913d288ca33937",
    "dsaEncryption": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "dsaWithSHA": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "dsaWithSHA1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "dss1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "ecdsa-with-SHA1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "md4": "14226bf662b757c985968b1a3cc86b80",
    "md4WithRSAEncryption": "14226bf662b757c985968b1a3cc86b80",
    "md5": "3b4cc9226a236742d72578c5915b6c3c",
    "md5WithRSAEncryption": "3b4cc9226a236742d72578c5915b6c3c",
    "mdc2": "e201f3d4d35c67817d9ab7c0ab2b5d26",
    "mdc2WithRSA": "e201f3d4d35c67817d9ab7c0ab2b5d26",
    "ripemd": "eee22b636281b5c125e9fe38f9ab754afa648fd1",
    "ripemd160": "eee22b636281b5c125e9fe38f9ab754afa648fd1",
    "ripemd160WithRSA": "eee22b636281b5c125e9fe38f9ab754afa648fd1",
    "rmd160": "eee22b636281b5c125e9fe38f9ab754afa648fd1",
    "sha": "300e8646d5d0ed06c5d7344798d710a115e93888",
    "sha1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "sha1WithRSAEncryption": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "sha224": "fc062b6f3c2b5f3fbdcda1bbd6601e8b5b48748dd210634416b254e3",
    "sha224WithRSAEncryption": "fc062b6f3c2b5f3fbdcda1bbd6601e8b5b48748dd210634416b254e3",
    "sha256": "99a8d6823b803a8d41ed7c26322b4ac8fdc86ce4457ffaaf8600e99595f1577a",
    "sha256WithRSAEncryption": "99a8d6823b803a8d41ed7c26322b4ac8fdc86ce4457ffaaf8600e99595f1577a",
    "sha384": "ae3099ae9838e3e363f365040fa186de3b7d6f134f6018ae763b831afc0cfbde03e17c7b5d5bec3089a26f274fe2b297",
    "sha384WithRSAEncryption": "ae3099ae9838e3e363f365040fa186de3b7d6f134f6018ae763b831afc0cfbde03e17c7b5d5bec3089a26f274fe2b297",
    "sha512": "eb2276d498230c11404628a8dab7a851b1e9b1e529dc92241e8b99b2d11cea4668be552d40af999af815c9c3994da790de94386b955fa762e9913d288ca33937",
    "sha512WithRSAEncryption": "eb2276d498230c11404628a8dab7a851b1e9b1e529dc92241e8b99b2d11cea4668be552d40af999af815c9c3994da790de94386b955fa762e9913d288ca33937",
    "shaWithRSAEncryption": "300e8646d5d0ed06c5d7344798d710a115e93888",
    "ssl2-md5": "3b4cc9226a236742d72578c5915b6c3c",
    "ssl3-md5": "3b4cc9226a236742d72578c5915b6c3c",
    "ssl3-sha1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "whirlpool": "242fc9f0ae29562dea0b04e7b6e5396ea07672aea450a6ab60332c98a332754941a9a8059d7ce8e8e8fd54f5030f4e279a6561928c030e37a7810880e619cd30"
  },
  {
    "input": "4Ptx+PnB/A==",
    "DSA": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "DSA-SHA": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "DSA-SHA1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "DSA-SHA1-old": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "RSA-MD4": "7f9a8534234f6dfde5a2475ed993347c",
    "RSA-MD5": "35950208a022baac90056636827158ce",
    "RSA-MDC2": "48117e9635d7cc41320ee331d6e93e54",
    "RSA-RIPEMD160": "39eb7ee3be32c69e6ea1055ae7aefd75674c9722",
    "RSA-SHA": "2e4b6da9ae9a464f6afe00b5f85c18c09e1e2a62",
    "RSA-SHA1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "RSA-SHA1-2": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "RSA-SHA224": "ba682c86eea9dc3569ecf80f94ed0893ae686d0a34a6bf2ac11dc69b",
    "RSA-SHA256": "5d73704556bd458af1b90383d98591c1d01894d99b394fb7647d3d0cbd45f9a0",
    "RSA-SHA384": "b9094601f510c4ef26dd4e35c54bd6f456479acdad713ca8bda12bda2f55af0af8adb511b40f880cae655f49f7cde6f5",
    "RSA-SHA512": "0d1c37c810abe448b113e196e2afad16dd3dc095a8c28d0c47c023fbd2c5cb032b8b1116efebad9a60a209fc099b8a03c0fe6eb1d7444c2cf01fce4da9ecefad",
    "dsaEncryption": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "dsaWithSHA": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "dsaWithSHA1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "dss1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "ecdsa-with-SHA1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "md4": "7f9a8534234f6dfde5a2475ed993347c",
    "md4WithRSAEncryption": "7f9a8534234f6dfde5a2475ed993347c",
    "md5": "35950208a022baac90056636827158ce",
    "md5WithRSAEncryption": "35950208a022baac90056636827158ce",
    "mdc2": "48117e9635d7cc41320ee331d6e93e54",
    "mdc2WithRSA": "48117e9635d7cc41320ee331d6e93e54",
    "ripemd": "39eb7ee3be32c69e6ea1055ae7aefd75674c9722",
    "ripemd160": "39eb7ee3be32c69e6ea1055ae7aefd75674c9722",
    "ripemd160WithRSA": "39eb7ee3be32c69e6ea1055ae7aefd75674c9722",
    "rmd160": "39eb7ee3be32c69e6ea1055ae7aefd75674c9722",
    "sha": "2e4b6da9ae9a464f6afe00b5f85c18c09e1e2a62",
    "sha1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "sha1WithRSAEncryption": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "sha224": "ba682c86eea9dc3569ecf80f94ed0893ae686d0a34a6bf2ac11dc69b",
    "sha224WithRSAEncryption": "ba682c86eea9dc3569ecf80f94ed0893ae686d0a34a6bf2ac11dc69b",
    "sha256": "5d73704556bd458af1b90383d98591c1d01894d99b394fb7647d3d0cbd45f9a0",
    "sha256WithRSAEncryption": "5d73704556bd458af1b90383d98591c1d01894d99b394fb7647d3d0cbd45f9a0",
    "sha384": "b9094601f510c4ef26dd4e35c54bd6f456479acdad713ca8bda12bda2f55af0af8adb511b40f880cae655f49f7cde6f5",
    "sha384WithRSAEncryption": "b9094601f510c4ef26dd4e35c54bd6f456479acdad713ca8bda12bda2f55af0af8adb511b40f880cae655f49f7cde6f5",
    "sha512": "0d1c37c810abe448b113e196e2afad16dd3dc095a8c28d0c47c023fbd2c5cb032b8b1116efebad9a60a209fc099b8a03c0fe6eb1d7444c2cf01fce4da9ecefad",
    "sha512WithRSAEncryption": "0d1c37c810abe448b113e196e2afad16dd3dc095a8c28d0c47c023fbd2c5cb032b8b1116efebad9a60a209fc099b8a03c0fe6eb1d7444c2cf01fce4da9ecefad",
    "shaWithRSAEncryption": "2e4b6da9ae9a464f6afe00b5f85c18c09e1e2a62",
    "ssl2-md5": "35950208a022baac90056636827158ce",
    "ssl3-md5": "35950208a022baac90056636827158ce",
    "ssl3-sha1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "whirlpool": "2c2f7c9be97d4c644ba3945896b7100dafebc814e1a555b8ee77405527ec0af0e778a9314609901da4d944305e47dee6f6055f43b50ede637c303291b83fdb08"
  },
  {
    "input": "/3xgPB+A4gc=",
    "DSA": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "DSA-SHA": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "DSA-SHA1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "DSA-SHA1-old": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "RSA-MD4": "523af852dca564c3471ebaa3aad7963a",
    "RSA-MD5": "84cedff2ed1b78b395cc8651094f4ce3",
    "RSA-MDC2": "b177c20a33bb6f7fcd767809a821bcb8",
    "RSA-RIPEMD160": "a2c3be6b9be577b2e81b492400ce2e767e689dac",
    "RSA-SHA": "7c58e8c28c0209ba93caba1976860799832c0068",
    "RSA-SHA1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "RSA-SHA1-2": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "RSA-SHA224": "b9948b9a8a8242a6549d0f6da4efb80284b1415955f9dab30f0167a6",
    "RSA-SHA256": "3b9606c772ea20bf2889732b034f9fd476ceddefe8ec4e3704c5993e38dace1b",
    "RSA-SHA384": "0425688027c940ff1dd6a940dd56c2fd206724e08759bdeaaa919f36b15dc883dc7d3b9d2258ebbd193031ab56fa9719",
    "RSA-SHA512": "7f3acc0c6821e17e47346b363aec4f45be96963a45253fd6972b7736c45ad8d6bcbe6ffac0a6b919dc3136895c5365e1467add1fee9531f641ec60d5da96489e",
    "dsaEncryption": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "dsaWithSHA": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "dsaWithSHA1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "dss1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "ecdsa-with-SHA1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "md4": "523af852dca564c3471ebaa3aad7963a",
    "md4WithRSAEncryption": "523af852dca564c3471ebaa3aad7963a",
    "md5": "84cedff2ed1b78b395cc8651094f4ce3",
    "md5WithRSAEncryption": "84cedff2ed1b78b395cc8651094f4ce3",
    "mdc2": "b177c20a33bb6f7fcd767809a821bcb8",
    "mdc2WithRSA": "b177c20a33bb6f7fcd767809a821bcb8",
    "ripemd": "a2c3be6b9be577b2e81b492400ce2e767e689dac",
    "ripemd160": "a2c3be6b9be577b2e81b492400ce2e767e689dac",
    "ripemd160WithRSA": "a2c3be6b9be577b2e81b492400ce2e767e689dac",
    "rmd160": "a2c3be6b9be577b2e81b492400ce2e767e689dac",
    "sha": "7c58e8c28c0209ba93caba1976860799832c0068",
    "sha1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "sha1WithRSAEncryption": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "sha224": "b9948b9a8a8242a6549d0f6da4efb80284b1415955f9dab30f0167a6",
    "sha224WithRSAEncryption": "b9948b9a8a8242a6549d0f6da4efb80284b1415955f9dab30f0167a6",
    "sha256": "3b9606c772ea20bf2889732b034f9fd476ceddefe8ec4e3704c5993e38dace1b",
    "sha256WithRSAEncryption": "3b9606c772ea20bf2889732b034f9fd476ceddefe8ec4e3704c5993e38dace1b",
    "sha384": "0425688027c940ff1dd6a940dd56c2fd206724e08759bdeaaa919f36b15dc883dc7d3b9d2258ebbd193031ab56fa9719",
    "sha384WithRSAEncryption": "0425688027c940ff1dd6a940dd56c2fd206724e08759bdeaaa919f36b15dc883dc7d3b9d2258ebbd193031ab56fa9719",
    "sha512": "7f3acc0c6821e17e47346b363aec4f45be96963a45253fd6972b7736c45ad8d6bcbe6ffac0a6b919dc3136895c5365e1467add1fee9531f641ec60d5da96489e",
    "sha512WithRSAEncryption": "7f3acc0c6821e17e47346b363aec4f45be96963a45253fd6972b7736c45ad8d6bcbe6ffac0a6b919dc3136895c5365e1467add1fee9531f641ec60d5da96489e",
    "shaWithRSAEncryption": "7c58e8c28c0209ba93caba1976860799832c0068",
    "ssl2-md5": "84cedff2ed1b78b395cc8651094f4ce3",
    "ssl3-md5": "84cedff2ed1b78b395cc8651094f4ce3",
    "ssl3-sha1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "whirlpool": "997a2b1cbcd048fdb95eba258a108134f64372063c47f5aae204ab24461fc641a9f12b7a818f731e1b14c3e11be5a42b9407774e8767abed403432ebce9b088f"
  },
  {
    "input": "8D/IYIH+Afh/",
    "DSA": "f871bce62436c1e280357416695ee2ef9b83695c",
    "DSA-SHA": "f871bce62436c1e280357416695ee2ef9b83695c",
    "DSA-SHA1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "DSA-SHA1-old": "f871bce62436c1e280357416695ee2ef9b83695c",
    "RSA-MD4": "75ee621c4a7e7a34c33ea7e743426793",
    "RSA-MD5": "7badf748f4cb700272a72edfea22e9bf",
    "RSA-MDC2": "803c503e04447d8e53208b4915e0585b",
    "RSA-RIPEMD160": "d3a758579dd2b3ce274d05b850e9a494c616393b",
    "RSA-SHA": "52c6e6f1f97ff4289aadb7ea1c74673ac309e31a",
    "RSA-SHA1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "RSA-SHA1-2": "f871bce62436c1e280357416695ee2ef9b83695c",
    "RSA-SHA224": "47f5053b04c3bd37dd93faad62b393a0677e3670aa61d769612980f7",
    "RSA-SHA256": "b858d7c61b67e1688c267ca83b57dd0947c4e5acc4eb3d130fbd92222b66a9ab",
    "RSA-SHA384": "109ae778f4545968ebf5d0f10d7673d2450007e8649accbd7f432008394ff642f56c0952e94f770fe4f29f8d4c54aac1",
    "RSA-SHA512": "64e87ebf5229971b7ba773eb8f9d221a3ade057a293afd1e4ddb20735ea4e5fc908b71e28400afacf3aa58c70f6f72f81173f3990f3f97c9e6f469910fe48ea9",
    "dsaEncryption": "f871bce62436c1e280357416695ee2ef9b83695c",
    "dsaWithSHA": "f871bce62436c1e280357416695ee2ef9b83695c",
    "dsaWithSHA1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "dss1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "ecdsa-with-SHA1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "md4": "75ee621c4a7e7a34c33ea7e743426793",
    "md4WithRSAEncryption": "75ee621c4a7e7a34c33ea7e743426793",
    "md5": "7badf748f4cb700272a72edfea22e9bf",
    "md5WithRSAEncryption": "7badf748f4cb700272a72edfea22e9bf",
    "mdc2": "803c503e04447d8e53208b4915e0585b",
    "mdc2WithRSA": "803c503e04447d8e53208b4915e0585b",
    "ripemd": "d3a758579dd2b3ce274d05b850e9a494c616393b",
    "ripemd160": "d3a758579dd2b3ce274d05b850e9a494c616393b",
    "ripemd160WithRSA": "d3a758579dd2b3ce274d05b850e9a494c616393b",
    "rmd160": "d3a758579dd2b3ce274d05b850e9a494c616393b",
    "sha": "52c6e6f1f97ff4289aadb7ea1c74673ac309e31a",
    "sha1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "sha1WithRSAEncryption": "f871bce62436c1e280357416695ee2ef9b83695c",
    "sha224": "47f5053b04c3bd37dd93faad62b393a0677e3670aa61d769612980f7",
    "sha224WithRSAEncryption": "47f5053b04c3bd37dd93faad62b393a0677e3670aa61d769612980f7",
    "sha256": "b858d7c61b67e1688c267ca83b57dd0947c4e5acc4eb3d130fbd92222b66a9ab",
    "sha256WithRSAEncryption": "b858d7c61b67e1688c267ca83b57dd0947c4e5acc4eb3d130fbd92222b66a9ab",
    "sha384": "109ae778f4545968ebf5d0f10d7673d2450007e8649accbd7f432008394ff642f56c0952e94f770fe4f29f8d4c54aac1",
    "sha384WithRSAEncryption": "109ae778f4545968ebf5d0f10d7673d2450007e8649accbd7f432008394ff642f56c0952e94f770fe4f29f8d4c54aac1",
    "sha512": "64e87ebf5229971b7ba773eb8f9d221a3ade057a293afd1e4ddb20735ea4e5fc908b71e28400afacf3aa58c70f6f72f81173f3990f3f97c9e6f469910fe48ea9",
    "sha512WithRSAEncryption": "64e87ebf5229971b7ba773eb8f9d221a3ade057a293afd1e4ddb20735ea4e5fc908b71e28400afacf3aa58c70f6f72f81173f3990f3f97c9e6f469910fe48ea9",
    "shaWithRSAEncryption": "52c6e6f1f97ff4289aadb7ea1c74673ac309e31a",
    "ssl2-md5": "7badf748f4cb700272a72edfea22e9bf",
    "ssl3-md5": "7badf748f4cb700272a72edfea22e9bf",
    "ssl3-sha1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "whirlpool": "b8f2a69be4d9b9c522fc7f9360d6dcc5e1b5564a2d0db6c928ae578c519be0e624430d6b884731eb66f0bb575ccf2cf8e467fb434e1d2a225a44ea49460f9184"
  },
  {
    "input": "n8f4H8Hjx8c/AA==",
    "DSA": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "DSA-SHA": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "DSA-SHA1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "DSA-SHA1-old": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "RSA-MD4": "dd61fd9c2fa93d506b70c04de9bcf7be",
    "RSA-MD5": "a1bb6e142739dbdb0925747d95e0a1ad",
    "RSA-MDC2": "1372739810e10d55d30ed565fde5b18d",
    "RSA-RIPEMD160": "bda4177d206675cfffeb3ba2b3792c85a37ba3a9",
    "RSA-SHA": "8467ac592943a4451b4a4af3e26339f5765ec7f9",
    "RSA-SHA1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "RSA-SHA1-2": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "RSA-SHA224": "65f1f550b227b0b66c2cc2ce1df63ea7195abe174b753f1f8da264e0",
    "RSA-SHA256": "87574390294ef6d212b6d8c44ebd5c88e932036dadd0b827c6cb25cd120bfdf6",
    "RSA-SHA384": "f7f658a8e47d52cd8870c19a4f6769b667373f8af474451b3cf4032ba43eee167b77970281feb7e2e6f2d0ffaaae750e",
    "RSA-SHA512": "ddd79f12cecc64f1936c92a7ab03db23d2c9edf0109187c5687918da836379af37268321c488b0912f734303c77c05296fceb1b35abf2ad651502393211f3ea3",
    "dsaEncryption": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "dsaWithSHA": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "dsaWithSHA1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "dss1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "ecdsa-with-SHA1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "md4": "dd61fd9c2fa93d506b70c04de9bcf7be",
    "md4WithRSAEncryption": "dd61fd9c2fa93d506b70c04de9bcf7be",
    "md5": "a1bb6e142739dbdb0925747d95e0a1ad",
    "md5WithRSAEncryption": "a1bb6e142739dbdb0925747d95e0a1ad",
    "mdc2": "1372739810e10d55d30ed565fde5b18d",
    "mdc2WithRSA": "1372739810e10d55d30ed565fde5b18d",
    "ripemd": "bda4177d206675cfffeb3ba2b3792c85a37ba3a9",
    "ripemd160": "bda4177d206675cfffeb3ba2b3792c85a37ba3a9",
    "ripemd160WithRSA": "bda4177d206675cfffeb3ba2b3792c85a37ba3a9",
    "rmd160": "bda4177d206675cfffeb3ba2b3792c85a37ba3a9",
    "sha": "8467ac592943a4451b4a4af3e26339f5765ec7f9",
    "sha1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "sha1WithRSAEncryption": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "sha224": "65f1f550b227b0b66c2cc2ce1df63ea7195abe174b753f1f8da264e0",
    "sha224WithRSAEncryption": "65f1f550b227b0b66c2cc2ce1df63ea7195abe174b753f1f8da264e0",
    "sha256": "87574390294ef6d212b6d8c44ebd5c88e932036dadd0b827c6cb25cd120bfdf6",
    "sha256WithRSAEncryption": "87574390294ef6d212b6d8c44ebd5c88e932036dadd0b827c6cb25cd120bfdf6",
    "sha384": "f7f658a8e47d52cd8870c19a4f6769b667373f8af474451b3cf4032ba43eee167b77970281feb7e2e6f2d0ffaaae750e",
    "sha384WithRSAEncryption": "f7f658a8e47d52cd8870c19a4f6769b667373f8af474451b3cf4032ba43eee167b77970281feb7e2e6f2d0ffaaae750e",
    "sha512": "ddd79f12cecc64f1936c92a7ab03db23d2c9edf0109187c5687918da836379af37268321c488b0912f734303c77c05296fceb1b35abf2ad651502393211f3ea3",
    "sha512WithRSAEncryption": "ddd79f12cecc64f1936c92a7ab03db23d2c9edf0109187c5687918da836379af37268321c488b0912f734303c77c05296fceb1b35abf2ad651502393211f3ea3",
    "shaWithRSAEncryption": "8467ac592943a4451b4a4af3e26339f5765ec7f9",
    "ssl2-md5": "a1bb6e142739dbdb0925747d95e0a1ad",
    "ssl3-md5": "a1bb6e142739dbdb0925747d95e0a1ad",
    "ssl3-sha1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "whirlpool": "b2e2282ed1a82c9d0d45f1c44b311250fcfed26470c8ef425ab1ca4a7177da0065469ab5deb239e4ecfc36ab769048c310e21c8f6c43a26abc2518357ce46c9f"
  },
  {
    "input": "AH+/38D+An4A+H8=",
    "DSA": "1698994a273404848e56e7fda4457b5900de1342",
    "DSA-SHA": "1698994a273404848e56e7fda4457b5900de1342",
    "DSA-SHA1": "1698994a273404848e56e7fda4457b5900de1342",
    "DSA-SHA1-old": "1698994a273404848e56e7fda4457b5900de1342",
    "RSA-MD4": "96dcf1c7c35807d18fb8c4bc1af8a375",
    "RSA-MD5": "0cd9b72dfdee8efd2e1515f4c5a62284",
    "RSA-MDC2": "8e84789dfd4bfd091437ba0ee6cf6fb8",
    "RSA-RIPEMD160": "fcd08345499eb0083c990873e4dc7173f6cdb5e1",
    "RSA-SHA": "603e9b391863947fd4f300a96c9f930fbe3c20c6",
    "RSA-SHA1": "1698994a273404848e56e7fda4457b5900de1342",
    "RSA-SHA1-2": "1698994a273404848e56e7fda4457b5900de1342",
    "RSA-SHA224": "2f703f38b49bd96bb80b5f4826843954a1b54ccbf4b39c1281782e60",
    "RSA-SHA256": "afe90242f095e967523c12333b0093d4e532a0db0f27dcc25d44d23ffb62094b",
    "RSA-SHA384": "60790ccc54be76d4249b5e90e7551d3787135d74f1d1911f1af1973e5b936860bb9ac2d92c4c885776e1f68810008109",
    "RSA-SHA512": "f780834bda7d752773f106df8f99464ffd55dfed8e4df11247e9af8661e62724966a7077af60c1d19d1777e2e83d22ebf357dbafd40b4376dc267a04413c2a35",
    "dsaEncryption": "1698994a273404848e56e7fda4457b5900de1342",
    "dsaWithSHA": "1698994a273404848e56e7fda4457b5900de1342",
    "dsaWithSHA1": "1698994a273404848e56e7fda4457b5900de1342",
    "dss1": "1698994a273404848e56e7fda4457b5900de1342",
    "ecdsa-with-SHA1": "1698994a273404848e56e7fda4457b5900de1342",
    "md4": "96dcf1c7c35807d18fb8c4bc1af8a375",
    "md4WithRSAEncryption": "96dcf1c7c35807d18fb8c4bc1af8a375",
    "md5": "0cd9b72dfdee8efd2e1515f4c5a62284",
    "md5WithRSAEncryption": "0cd9b72dfdee8efd2e1515f4c5a62284",
    "mdc2": "8e84789dfd4bfd091437ba0ee6cf6fb8",
    "mdc2WithRSA": "8e84789dfd4bfd091437ba0ee6cf6fb8",
    "ripemd": "fcd08345499eb0083c990873e4dc7173f6cdb5e1",
    "ripemd160": "fcd08345499eb0083c990873e4dc7173f6cdb5e1",
    "ripemd160WithRSA": "fcd08345499eb0083c990873e4dc7173f6cdb5e1",
    "rmd160": "fcd08345499eb0083c990873e4dc7173f6cdb5e1",
    "sha": "603e9b391863947fd4f300a96c9f930fbe3c20c6",
    "sha1": "1698994a273404848e56e7fda4457b5900de1342",
    "sha1WithRSAEncryption": "1698994a273404848e56e7fda4457b5900de1342",
    "sha224": "2f703f38b49bd96bb80b5f4826843954a1b54ccbf4b39c1281782e60",
    "sha224WithRSAEncryption": "2f703f38b49bd96bb80b5f4826843954a1b54ccbf4b39c1281782e60",
    "sha256": "afe90242f095e967523c12333b0093d4e532a0db0f27dcc25d44d23ffb62094b",
    "sha256WithRSAEncryption": "afe90242f095e967523c12333b0093d4e532a0db0f27dcc25d44d23ffb62094b",
    "sha384": "60790ccc54be76d4249b5e90e7551d3787135d74f1d1911f1af1973e5b936860bb9ac2d92c4c885776e1f68810008109",
    "sha384WithRSAEncryption": "60790ccc54be76d4249b5e90e7551d3787135d74f1d1911f1af1973e5b936860bb9ac2d92c4c885776e1f68810008109",
    "sha512": "f780834bda7d752773f106df8f99464ffd55dfed8e4df11247e9af8661e62724966a7077af60c1d19d1777e2e83d22ebf357dbafd40b4376dc267a04413c2a35",
    "sha512WithRSAEncryption": "f780834bda7d752773f106df8f99464ffd55dfed8e4df11247e9af8661e62724966a7077af60c1d19d1777e2e83d22ebf357dbafd40b4376dc267a04413c2a35",
    "shaWithRSAEncryption": "603e9b391863947fd4f300a96c9f930fbe3c20c6",
    "ssl2-md5": "0cd9b72dfdee8efd2e1515f4c5a62284",
    "ssl3-md5": "0cd9b72dfdee8efd2e1515f4c5a62284",
    "ssl3-sha1": "1698994a273404848e56e7fda4457b5900de1342",
    "whirlpool": "266b794a411e41c000af3f75ddb088bdb5f7c290dd287cef6575f7ca1e3b79b401ab0f2bf142e9043aebc64a9d973f85929859ad6b2617c673b49f76b7400929"
  },
  {
    "input": "AQHAHgP4MAgP8/n/",
    "DSA": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "DSA-SHA": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "DSA-SHA1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "DSA-SHA1-old": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "RSA-MD4": "25d0698fca539aa83eccaad6f51cf263",
    "RSA-MD5": "ef07c13e75d50578d09052aa21a7cffb",
    "RSA-MDC2": "8bda07914a0ac0a16815e96cf63e5e2a",
    "RSA-RIPEMD160": "6a303508c5d5a24030ec4dfb545743994a81c145",
    "RSA-SHA": "edc32861fd7332014ee45c8321834934accd276e",
    "RSA-SHA1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "RSA-SHA1-2": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "RSA-SHA224": "5eee9f26dfb6344a86947fb0a3e4920c6d7e40f4d57e9a4edf55f5d7",
    "RSA-SHA256": "55731252db2418c49f15d7f0f146c6506589f016a82c72cf8a6276ac6bd123c7",
    "RSA-SHA384": "6e6bef8ce8a247a04d42cf16db19ce8c63710da54dcd4b5a31c906e39e4a391576a0165a95b66657c7c9a403b56f3650",
    "RSA-SHA512": "5a3a2555f8affd5dad71dbae0571f47cda35089ff232f43f6f7615bd20353203793177d8bbfdc9ef336406811680a88dd6d46f44a1ff46e99a5631bc34eb5e15",
    "dsaEncryption": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "dsaWithSHA": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "dsaWithSHA1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "dss1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "ecdsa-with-SHA1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "md4": "25d0698fca539aa83eccaad6f51cf263",
    "md4WithRSAEncryption": "25d0698fca539aa83eccaad6f51cf263",
    "md5": "ef07c13e75d50578d09052aa21a7cffb",
    "md5WithRSAEncryption": "ef07c13e75d50578d09052aa21a7cffb",
    "mdc2": "8bda07914a0ac0a16815e96cf63e5e2a",
    "mdc2WithRSA": "8bda07914a0ac0a16815e96cf63e5e2a",
    "ripemd": "6a303508c5d5a24030ec4dfb545743994a81c145",
    "ripemd160": "6a303508c5d5a24030ec4dfb545743994a81c145",
    "ripemd160WithRSA": "6a303508c5d5a24030ec4dfb545743994a81c145",
    "rmd160": "6a303508c5d5a24030ec4dfb545743994a81c145",
    "sha": "edc32861fd7332014ee45c8321834934accd276e",
    "sha1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "sha1WithRSAEncryption": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "sha224": "5eee9f26dfb6344a86947fb0a3e4920c6d7e40f4d57e9a4edf55f5d7",
    "sha224WithRSAEncryption": "5eee9f26dfb6344a86947fb0a3e4920c6d7e40f4d57e9a4edf55f5d7",
    "sha256": "55731252db2418c49f15d7f0f146c6506589f016a82c72cf8a6276ac6bd123c7",
    "sha256WithRSAEncryption": "55731252db2418c49f15d7f0f146c6506589f016a82c72cf8a6276ac6bd123c7",
    "sha384": "6e6bef8ce8a247a04d42cf16db19ce8c63710da54dcd4b5a31c906e39e4a391576a0165a95b66657c7c9a403b56f3650",
    "sha384WithRSAEncryption": "6e6bef8ce8a247a04d42cf16db19ce8c63710da54dcd4b5a31c906e39e4a391576a0165a95b66657c7c9a403b56f3650",
    "sha512": "5a3a2555f8affd5dad71dbae0571f47cda35089ff232f43f6f7615bd20353203793177d8bbfdc9ef336406811680a88dd6d46f44a1ff46e99a5631bc34eb5e15",
    "sha512WithRSAEncryption": "5a3a2555f8affd5dad71dbae0571f47cda35089ff232f43f6f7615bd20353203793177d8bbfdc9ef336406811680a88dd6d46f44a1ff46e99a5631bc34eb5e15",
    "shaWithRSAEncryption": "edc32861fd7332014ee45c8321834934accd276e",
    "ssl2-md5": "ef07c13e75d50578d09052aa21a7cffb",
    "ssl3-md5": "ef07c13e75d50578d09052aa21a7cffb",
    "ssl3-sha1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "whirlpool": "a11324d782bff5cd7da3085c5b5089ea6238def4ea42e4c128d0db56db87c2327a6139239bd3d73d8afef30c43545cb094492f02fef2030760dea4a29b9e9760"
  },
  {
    "input": "xAP8D/gBwA/wBhBB/w==",
    "DSA": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "DSA-SHA": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "DSA-SHA1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "DSA-SHA1-old": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "RSA-MD4": "475f6dc314219f77abf6b74cc0a48da7",
    "RSA-MD5": "cf3b261af9344bf83b4dd82b30242c78",
    "RSA-MDC2": "5be443d0163a7f47de9c95d5689f500d",
    "RSA-RIPEMD160": "dd658909ab7a733c92284c31570c80efd1f04411",
    "RSA-SHA": "9535fc46f8dc06a2a3b4a9c840bb4795d5703bc4",
    "RSA-SHA1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "RSA-SHA1-2": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "RSA-SHA224": "0a2135c560f4fc781223299075897355c7bcd368a64d5ba9d719bd78",
    "RSA-SHA256": "c2e0ed603bfa67292b78a29264e409a2e0c98482cdb59cf4fe7cafff69853d11",
    "RSA-SHA384": "b49a8a4c87a2b45628f362b424a97a0315f7d0c811ae650e5fef1f2161f8db595405bbb34a125b60b400d68f972c11ae",
    "RSA-SHA512": "5737cddc5cd9cb9aca517a4efea88ed34206a1427b1a15323d79d2a731d1981d6eee0d02e9f22dcf44e2ca9c6aab1942d07bcb3a9ca03af388e422175ee476f6",
    "dsaEncryption": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "dsaWithSHA": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "dsaWithSHA1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "dss1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "ecdsa